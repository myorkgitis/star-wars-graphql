"""
The Any scalar type is used in operations and types that involve any type of value.
"""
scalar Any

"""
Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments
"""
union ArrayResult = Character | Element | Film | Planet | Role | Specie | Starship | User | Vehicle

"""
The ArrayWhereInput input type is used in operations that involve filtering objects by a field of type Array.
"""
input ArrayWhereInput {
  """
  This is the containedBy operator to specify a constraint to select the objects where the values of an array field is contained by another specified array.
  """
  containedBy: [Any]

  """
  This is the contains operator to specify a constraint to select the objects where the values of an array field contain all elements of another specified array.
  """
  contains: [Any]

  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: Any

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value.
  """
  greaterThan: Any

  """
  This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value.
  """
  greaterThanOrEqualTo: Any

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [Any]

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value.
  """
  lessThan: Any

  """
  This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value.
  """
  lessThanOrEqualTo: Any

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: Any

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [Any]

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
The BooleanWhereInput input type is used in operations that involve filtering objects by a field of type Boolean.
"""
input BooleanWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: Boolean

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: Boolean

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
The BoxInput type is used to specifiy a box operation on a within geo query.
"""
input BoxInput {
  """This is the bottom left coordinates of the box."""
  bottomLeft: GeoPointInput!

  """This is the upper right coordinates of the box."""
  upperRight: GeoPointInput!
}

"""
The Bytes scalar type is used in operations and types that involve base 64 binary data.
"""
scalar Bytes

"""
The BytesWhereInput input type is used in operations that involve filtering objects by a field of type Bytes.
"""
input BytesWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: Bytes

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value.
  """
  greaterThan: Bytes

  """
  This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value.
  """
  greaterThanOrEqualTo: Bytes

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [Bytes]

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value.
  """
  lessThan: Bytes

  """
  This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value.
  """
  lessThanOrEqualTo: Bytes

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: Bytes

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [Bytes]

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
The CenterSphereInput type is used to specifiy a centerSphere operation on a geoWithin query.
"""
input CenterSphereInput {
  """This is the center of the sphere."""
  center: GeoPointInput!

  """This is the radius of the sphere."""
  distance: Float!
}

"""
The Character object type is used in operations that involve outputting objects of Character class.
"""
type Character implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object birthYear."""
  birthYear: String

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object eyeColor."""
  eyeColor: String

  """This is the object films."""
  films(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [FilmOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: FilmWhereInput
  ): FilmFindResult!

  """This is the object gender."""
  gender: String

  """This is the object hairColor."""
  hairColor: String

  """This is the object height."""
  height: Float

  """This is the object homeworld."""
  homeworld: Planet

  """This is the object id."""
  id: ID!

  """This is the object mass."""
  mass: Float

  """This is the object name."""
  name: String

  """This is the object skinColor."""
  skinColor: String

  """This is the object species."""
  species(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [SpecieOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: SpecieWhereInput
  ): SpecieFindResult!

  """This is the object starships."""
  starships(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [StarshipOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: StarshipWhereInput
  ): StarshipFindResult!

  """This is the date in which the object was las updated."""
  updatedAt: Date!

  """This is the object vehicles."""
  vehicles(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [VehicleOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: VehicleWhereInput
  ): VehicleFindResult!
}

"""
The CharacterFindResult object type is used in the Character find query to return the data of the matched objects.
"""
type CharacterFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Character!]!
}

"""
The CharacterOrder input type is used when sorting objects of the Character class.
"""
enum CharacterOrder {
  ACL_ASC
  ACL_DESC
  birthYear_ASC
  birthYear_DESC
  createdAt_ASC
  createdAt_DESC
  eyeColor_ASC
  eyeColor_DESC
  films_ASC
  films_DESC
  gender_ASC
  gender_DESC
  hairColor_ASC
  hairColor_DESC
  height_ASC
  height_DESC
  homeworld_ASC
  homeworld_DESC
  id_ASC
  id_DESC
  mass_ASC
  mass_DESC
  name_ASC
  name_DESC
  skinColor_ASC
  skinColor_DESC
  species_ASC
  species_DESC
  starships_ASC
  starships_DESC
  updatedAt_ASC
  updatedAt_DESC
  vehicles_ASC
  vehicles_DESC
}

"""Allow to link OR add and link an object of the Character class."""
input CharacterPointerInput {
  """Create and link an object from Character class."""
  createAndLink: CreateCharacterFieldsInput

  """Link an existing object from Character class."""
  link: ID
}

"""
The CharacterPointerWhereInput input type is used in operations that involve filtering objects by a pointer field to Character class.
"""
input CharacterPointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the Character class into a relation field.
"""
input CharacterRelationInput {
  """Add an existing object from the Character class into the relation."""
  add: [ID!]

  """Create and add an object of the Character class into the relation."""
  createAndAdd: [CreateCharacterFieldsInput!]

  """
  Remove an existing object from the Character class out of the relation.
  """
  remove: [ID!]
}

"""
The CharacterWhereInput input type is used in operations that involve filtering objects of Character class.
"""
input CharacterWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [CharacterWhereInput!]

  """This is the NOR operator to compound constraints."""
  NOR: [CharacterWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [CharacterWhereInput!]

  """This is the object birthYear."""
  birthYear: StringWhereInput

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object eyeColor."""
  eyeColor: StringWhereInput

  """This is the object gender."""
  gender: StringWhereInput

  """This is the object hairColor."""
  hairColor: StringWhereInput

  """This is the object height."""
  height: NumberWhereInput

  """This is the object homeworld."""
  homeworld: PlanetPointerWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object mass."""
  mass: NumberWhereInput

  """This is the object name."""
  name: StringWhereInput

  """This is the object skinColor."""
  skinColor: StringWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput
}

"""
The Class type is used to return the information about an object class.
"""
type Class {
  """This is the name of the object class."""
  name: String!

  """These are the schema's fields of the object class."""
  schemaFields: [SchemaField!]!
}

"""
The CreateCharacterFieldsInput input type is used in operations that involve creation of objects in the Character class.
"""
input CreateCharacterFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object birthYear."""
  birthYear: String

  """This is the object eyeColor."""
  eyeColor: String

  """This is the object films."""
  films: FilmRelationInput

  """This is the object gender."""
  gender: String

  """This is the object hairColor."""
  hairColor: String

  """This is the object height."""
  height: Float

  """This is the object homeworld."""
  homeworld: PlanetPointerInput

  """This is the object mass."""
  mass: Float

  """This is the object name."""
  name: String

  """This is the object skinColor."""
  skinColor: String

  """This is the object species."""
  species: SpecieRelationInput

  """This is the object starships."""
  starships: StarshipRelationInput

  """This is the object vehicles."""
  vehicles: VehicleRelationInput
}

"""
The CreateFilmFieldsInput input type is used in operations that involve creation of objects in the Film class.
"""
input CreateFilmFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object characters."""
  characters: CharacterRelationInput

  """This is the object director."""
  director: String

  """This is the object episodeId."""
  episodeId: Float

  """This is the object openingCrawl."""
  openingCrawl: String

  """This is the object planets."""
  planets: PlanetRelationInput

  """This is the object producer."""
  producer: String

  """This is the object releaseDate."""
  releaseDate: Date

  """This is the object species."""
  species: SpecieRelationInput

  """This is the object starships."""
  starships: StarshipRelationInput

  """This is the object title."""
  title: String

  """This is the object vehicles."""
  vehicles: VehicleRelationInput
}

"""
The CreatePlanetFieldsInput input type is used in operations that involve creation of objects in the Planet class.
"""
input CreatePlanetFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object climate."""
  climate: [Any]

  """This is the object diameter."""
  diameter: Float

  """This is the object films."""
  films: FilmRelationInput

  """This is the object gravity."""
  gravity: String

  """This is the object name."""
  name: String

  """This is the object orbitalPeriod."""
  orbitalPeriod: Float

  """This is the object population."""
  population: Float

  """This is the object residents."""
  residents: CharacterRelationInput

  """This is the object rotationPeriod."""
  rotationPeriod: Float

  """This is the object species."""
  species: SpecieRelationInput

  """This is the object surfaceWater."""
  surfaceWater: Float

  """This is the object terrain."""
  terrain: [Any]
}

"""
The CreateRoleFieldsInput input type is used in operations that involve creation of objects in the Role class.
"""
input CreateRoleFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object name."""
  name: String

  """This is the object roles."""
  roles: RoleRelationInput

  """This is the object users."""
  users: UserRelationInput
}

"""
The CreateSpecieFieldsInput input type is used in operations that involve creation of objects in the Specie class.
"""
input CreateSpecieFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object averageHeight."""
  averageHeight: Float

  """This is the object averageLifespan."""
  averageLifespan: Float

  """This is the object classification."""
  classification: String

  """This is the object designation."""
  designation: String

  """This is the object eyeColors."""
  eyeColors: [Any]

  """This is the object films."""
  films: FilmRelationInput

  """This is the object hairColors."""
  hairColors: [Any]

  """This is the object homeworld."""
  homeworld: PlanetPointerInput

  """This is the object language."""
  language: String

  """This is the object name."""
  name: String

  """This is the object people."""
  people: CharacterRelationInput

  """This is the object skinColors."""
  skinColors: [Any]
}

"""
The CreateStarshipFieldsInput input type is used in operations that involve creation of objects in the Starship class.
"""
input CreateStarshipFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object MGLT."""
  MGLT: Float

  """This is the object cargoCapacity."""
  cargoCapacity: Float

  """This is the object consumables."""
  consumables: String

  """This is the object costInCredits."""
  costInCredits: Float

  """This is the object crew."""
  crew: Float

  """This is the object films."""
  films: FilmRelationInput

  """This is the object hyperdriveRating."""
  hyperdriveRating: Float

  """This is the object length."""
  length: Float

  """This is the object manufacturer."""
  manufacturer: String

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: Float

  """This is the object model."""
  model: String

  """This is the object name."""
  name: String

  """This is the object passengers."""
  passengers: Float

  """This is the object pilots."""
  pilots: CharacterRelationInput

  """This is the object starshipClass."""
  starshipClass: String
}

"""
The CreateUserFieldsInput input type is used in operations that involve creation of objects in the User class.
"""
input CreateUserFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object authData."""
  authData: Object

  """This is the object email."""
  email: String

  """This is the object emailVerified."""
  emailVerified: Boolean

  """This is the object password."""
  password: String

  """This is the object username."""
  username: String
}

"""
The CreateVehicleFieldsInput input type is used in operations that involve creation of objects in the Vehicle class.
"""
input CreateVehicleFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object cargoCapacity."""
  cargoCapacity: Float

  """This is the object consumables."""
  consumables: String

  """This is the object costInCredits."""
  costInCredits: Float

  """This is the object crew."""
  crew: Float

  """This is the object films."""
  films: FilmRelationInput

  """This is the object length."""
  length: Float

  """This is the object manufacturer."""
  manufacturer: String

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: Float

  """This is the object model."""
  model: String

  """This is the object name."""
  name: String

  """This is the object passengers."""
  passengers: Float

  """This is the object pilots."""
  pilots: CharacterRelationInput

  """This is the object vehicleClass."""
  vehicleClass: String
}

"""
The Date scalar type is used in operations and types that involve dates.
"""
scalar Date

"""
The DateWhereInput input type is used in operations that involve filtering objects by a field of type Date.
"""
input DateWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: Date

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value.
  """
  greaterThan: Date

  """
  This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value.
  """
  greaterThanOrEqualTo: Date

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [Date]

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value.
  """
  lessThan: Date

  """
  This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value.
  """
  lessThanOrEqualTo: Date

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: Date

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [Date]

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""The Element object type is used to return array items' value."""
type Element {
  """Return the value of the element in the array"""
  value: Any!
}

"""
The File scalar type is used in operations and types that involve files.
"""
scalar File

"""
The FileInfo object type is used to return the information about files.
"""
type FileInfo {
  """This is the file name."""
  name: String!

  """This is the url in which the file can be downloaded."""
  url: String!
}

"""
The FileWhereInput input type is used in operations that involve filtering objects by a field of type File.
"""
input FileWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: File

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value.
  """
  greaterThan: File

  """
  This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value.
  """
  greaterThanOrEqualTo: File

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [File]

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value.
  """
  lessThan: File

  """
  This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value.
  """
  lessThanOrEqualTo: File

  """
  This is the matchesRegex operator to specify a constraint to select the objects where the value of a field matches a specified regular expression.
  """
  matchesRegex: String

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: File

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [File]

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput

  """
  This is the options operator to specify optional flags (such as "i" and "m") to be added to a matchesRegex operation in the same set of constraints.
  """
  options: String
}

"""
The Film object type is used in operations that involve outputting objects of Film class.
"""
type Film implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object characters."""
  characters(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [CharacterOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: CharacterWhereInput
  ): CharacterFindResult!

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object director."""
  director: String

  """This is the object episodeId."""
  episodeId: Float

  """This is the object id."""
  id: ID!

  """This is the object openingCrawl."""
  openingCrawl: String

  """This is the object planets."""
  planets(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [PlanetOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: PlanetWhereInput
  ): PlanetFindResult!

  """This is the object producer."""
  producer: String

  """This is the object releaseDate."""
  releaseDate: Date

  """This is the object species."""
  species(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [SpecieOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: SpecieWhereInput
  ): SpecieFindResult!

  """This is the object starships."""
  starships(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [StarshipOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: StarshipWhereInput
  ): StarshipFindResult!

  """This is the object title."""
  title: String

  """This is the date in which the object was las updated."""
  updatedAt: Date!

  """This is the object vehicles."""
  vehicles(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [VehicleOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: VehicleWhereInput
  ): VehicleFindResult!
}

"""
The FilmFindResult object type is used in the Film find query to return the data of the matched objects.
"""
type FilmFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Film!]!
}

"""
The FilmOrder input type is used when sorting objects of the Film class.
"""
enum FilmOrder {
  ACL_ASC
  ACL_DESC
  characters_ASC
  characters_DESC
  createdAt_ASC
  createdAt_DESC
  director_ASC
  director_DESC
  episodeId_ASC
  episodeId_DESC
  id_ASC
  id_DESC
  openingCrawl_ASC
  openingCrawl_DESC
  planets_ASC
  planets_DESC
  producer_ASC
  producer_DESC
  releaseDate_ASC
  releaseDate_DESC
  species_ASC
  species_DESC
  starships_ASC
  starships_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  vehicles_ASC
  vehicles_DESC
}

"""Allow to link OR add and link an object of the Film class."""
input FilmPointerInput {
  """Create and link an object from Film class."""
  createAndLink: CreateFilmFieldsInput

  """Link an existing object from Film class."""
  link: ID
}

"""
The FilmPointerWhereInput input type is used in operations that involve filtering objects by a pointer field to Film class.
"""
input FilmPointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the Film class into a relation field.
"""
input FilmRelationInput {
  """Add an existing object from the Film class into the relation."""
  add: [ID!]

  """Create and add an object of the Film class into the relation."""
  createAndAdd: [CreateFilmFieldsInput!]

  """Remove an existing object from the Film class out of the relation."""
  remove: [ID!]
}

"""
The FilmWhereInput input type is used in operations that involve filtering objects of Film class.
"""
input FilmWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [FilmWhereInput!]

  """This is the NOR operator to compound constraints."""
  NOR: [FilmWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [FilmWhereInput!]

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object director."""
  director: StringWhereInput

  """This is the object episodeId."""
  episodeId: NumberWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object openingCrawl."""
  openingCrawl: StringWhereInput

  """This is the object producer."""
  producer: StringWhereInput

  """This is the object releaseDate."""
  releaseDate: DateWhereInput

  """This is the object title."""
  title: StringWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput
}

"""
The FindResult object type is used in the find queries to return the data of the matched objects.
"""
type FindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Object!]!
}

"""
The GeoIntersectsInput type is used to specify a geoIntersects operation on a constraint.
"""
input GeoIntersectsInput {
  """This is the point to be specified."""
  point: GeoPointInput
}

"""
The GeoPoint object type is used to return the information about geo point fields.
"""
type GeoPoint {
  """This is the latitude."""
  latitude: Float!

  """This is the longitude."""
  longitude: Float!
}

"""
The GeoPointInput type is used in operations that involve inputting fields of type geo point.
"""
input GeoPointInput {
  """This is the latitude."""
  latitude: Float!

  """This is the longitude."""
  longitude: Float!
}

"""
The GeoPointWhereInput input type is used in operations that involve filtering objects by a field of type GeoPoint.
"""
input GeoPointWhereInput {
  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the geoWithin operator to specify a constraint to select the objects where the values of a geo point field is within a specified polygon or sphere.
  """
  geoWithin: GeoWithinInput

  """
  This is the maxDistance operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in radians) from the geo point specified in the $nearSphere operator.
  """
  maxDistance: Float

  """
  This is the maxDistanceInKilometers operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in kilometers) from the geo point specified in the $nearSphere operator.
  """
  maxDistanceInKilometers: Float

  """
  This is the maxDistanceInMiles operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in miles) from the geo point specified in the $nearSphere operator.
  """
  maxDistanceInMiles: Float

  """
  This is the maxDistanceInRadians operator to specify a constraint to select the objects where the values of a geo point field is at a max distance (in radians) from the geo point specified in the $nearSphere operator.
  """
  maxDistanceInRadians: Float

  """
  This is the nearSphere operator to specify a constraint to select the objects where the values of a geo point field is near to another geo point.
  """
  nearSphere: GeoPointInput

  """
  This is the within operator to specify a constraint to select the objects where the values of a geo point field is within a specified box.
  """
  within: WithinInput
}

"""
The GeoWithinInput type is used to specify a geoWithin operation on a constraint.
"""
input GeoWithinInput {
  """This is the sphere to be specified."""
  centerSphere: CenterSphereInput

  """This is the polygon to be specified."""
  polygon: [GeoPointInput!]
}

"""An entry from an object, i.e., a pair of key and value."""
input KeyValueInput {
  """The key used to retrieve the value of this entry."""
  key: String!

  """The value of the entry. Could be any type of scalar data."""
  value: Any!
}

"""The LogInFieldsInput input type is used to login."""
input LogInFieldsInput {
  """This is the password used to log the user in."""
  password: String!

  """This is the username used to log the user in."""
  username: String!
}

"""Mutation is the top level type for mutations."""
type Mutation {
  """
  The createCharacter mutation can be used to create a new object of the Character class.
  """
  createCharacter(
    """These are the fields used to create the object."""
    fields: CreateCharacterFieldsInput
  ): Character!

  """
  The createClass mutation can be used to create the schema for a new object class.
  """
  createClass(
    """This is the name of the object class."""
    name: String!

    """These are the schema's fields of the object class."""
    schemaFields: SchemaFieldsInput
  ): Class!

  """The create mutation can be used to create and upload a new file."""
  createFile(
    """This is the new file to be created and uploaded"""
    upload: Upload!
  ): FileInfo!

  """
  The createFilm mutation can be used to create a new object of the Film class.
  """
  createFilm(
    """These are the fields used to create the object."""
    fields: CreateFilmFieldsInput
  ): Film!

  """
  The createPlanet mutation can be used to create a new object of the Planet class.
  """
  createPlanet(
    """These are the fields used to create the object."""
    fields: CreatePlanetFieldsInput
  ): Planet!

  """
  The createRole mutation can be used to create a new object of the Role class.
  """
  createRole(
    """These are the fields used to create the object."""
    fields: CreateRoleFieldsInput
  ): Role!

  """
  The createSpecie mutation can be used to create a new object of the Specie class.
  """
  createSpecie(
    """These are the fields used to create the object."""
    fields: CreateSpecieFieldsInput
  ): Specie!

  """
  The createStarship mutation can be used to create a new object of the Starship class.
  """
  createStarship(
    """These are the fields used to create the object."""
    fields: CreateStarshipFieldsInput
  ): Starship!

  """
  The createUser mutation can be used to create a new object of the User class.
  """
  createUser(
    """These are the fields used to create the object."""
    fields: CreateUserFieldsInput
  ): User!

  """
  The createVehicle mutation can be used to create a new object of the Vehicle class.
  """
  createVehicle(
    """These are the fields used to create the object."""
    fields: CreateVehicleFieldsInput
  ): Vehicle!

  """
  The deleteCharacter mutation can be used to delete an object of the Character class.
  """
  deleteCharacter(
    """This is the object id."""
    id: ID!
  ): Character!

  """
  The deleteClass mutation can be used to delete an existing object class.
  """
  deleteClass(
    """This is the name of the object class."""
    name: String!
  ): Class!

  """
  The deleteFilm mutation can be used to delete an object of the Film class.
  """
  deleteFilm(
    """This is the object id."""
    id: ID!
  ): Film!

  """
  The deletePlanet mutation can be used to delete an object of the Planet class.
  """
  deletePlanet(
    """This is the object id."""
    id: ID!
  ): Planet!

  """
  The deleteRole mutation can be used to delete an object of the Role class.
  """
  deleteRole(
    """This is the object id."""
    id: ID!
  ): Role!

  """
  The deleteSpecie mutation can be used to delete an object of the Specie class.
  """
  deleteSpecie(
    """This is the object id."""
    id: ID!
  ): Specie!

  """
  The deleteStarship mutation can be used to delete an object of the Starship class.
  """
  deleteStarship(
    """This is the object id."""
    id: ID!
  ): Starship!

  """
  The deleteUser mutation can be used to delete an object of the User class.
  """
  deleteUser(
    """This is the object id."""
    id: ID!
  ): User!

  """
  The deleteVehicle mutation can be used to delete an object of the Vehicle class.
  """
  deleteVehicle(
    """This is the object id."""
    id: ID!
  ): Vehicle!

  """The logIn mutation can be used to log the user in."""
  logIn(
    """This is data needed to login"""
    fields: LogInFieldsInput
  ): Viewer!

  """The logOut mutation can be used to log the user out."""
  logOut: Viewer!

  """The signUp mutation can be used to sign the user up."""
  signUp(fields: SignUpFieldsInput): Viewer!

  """
  The updateCharacter mutation can be used to update an object of the Character class.
  """
  updateCharacter(
    """These are the fields used to update the object."""
    fields: UpdateCharacterFieldsInput

    """This is the object id."""
    id: ID!
  ): Character!

  """
  The updateClass mutation can be used to update the schema for an existing object class.
  """
  updateClass(
    """This is the name of the object class."""
    name: String!

    """These are the schema's fields of the object class."""
    schemaFields: SchemaFieldsInput
  ): Class!

  """
  The updateFilm mutation can be used to update an object of the Film class.
  """
  updateFilm(
    """These are the fields used to update the object."""
    fields: UpdateFilmFieldsInput

    """This is the object id."""
    id: ID!
  ): Film!

  """
  The updatePlanet mutation can be used to update an object of the Planet class.
  """
  updatePlanet(
    """These are the fields used to update the object."""
    fields: UpdatePlanetFieldsInput

    """This is the object id."""
    id: ID!
  ): Planet!

  """
  The updateRole mutation can be used to update an object of the Role class.
  """
  updateRole(
    """These are the fields used to update the object."""
    fields: UpdateRoleFieldsInput

    """This is the object id."""
    id: ID!
  ): Role!

  """
  The updateSpecie mutation can be used to update an object of the Specie class.
  """
  updateSpecie(
    """These are the fields used to update the object."""
    fields: UpdateSpecieFieldsInput

    """This is the object id."""
    id: ID!
  ): Specie!

  """
  The updateStarship mutation can be used to update an object of the Starship class.
  """
  updateStarship(
    """These are the fields used to update the object."""
    fields: UpdateStarshipFieldsInput

    """This is the object id."""
    id: ID!
  ): Starship!

  """
  The updateUser mutation can be used to update an object of the User class.
  """
  updateUser(
    """These are the fields used to update the object."""
    fields: UpdateUserFieldsInput

    """This is the object id."""
    id: ID!
  ): User!

  """
  The updateVehicle mutation can be used to update an object of the Vehicle class.
  """
  updateVehicle(
    """These are the fields used to update the object."""
    fields: UpdateVehicleFieldsInput

    """This is the object id."""
    id: ID!
  ): Vehicle!
}

"""
The NumberWhereInput input type is used in operations that involve filtering objects by a field of type Number.
"""
input NumberWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: Float

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value.
  """
  greaterThan: Float

  """
  This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value.
  """
  greaterThanOrEqualTo: Float

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [Float]

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value.
  """
  lessThan: Float

  """
  This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value.
  """
  lessThanOrEqualTo: Float

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: Float

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [Float]

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
The Object scalar type is used in operations and types that involve objects.
"""
scalar Object

"""
The ObjectWhereInput input type is used in operations that involve filtering result by a field of type Object.
"""
input ObjectWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: KeyValueInput

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value.
  """
  greaterThan: KeyValueInput

  """
  This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value.
  """
  greaterThanOrEqualTo: KeyValueInput

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [KeyValueInput]

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value.
  """
  lessThan: KeyValueInput

  """
  This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value.
  """
  lessThanOrEqualTo: KeyValueInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: KeyValueInput

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [KeyValueInput]

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
The ParseObject interface type is used as a base type for the auto generated object types.
"""
interface ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object id."""
  id: ID!

  """This is the date in which the object was las updated."""
  updatedAt: Date!
}

"""
The Planet object type is used in operations that involve outputting objects of Planet class.
"""
type Planet implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """
  Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments
  """
  climate: [ArrayResult]

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object diameter."""
  diameter: Float

  """This is the object films."""
  films(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [FilmOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: FilmWhereInput
  ): FilmFindResult!

  """This is the object gravity."""
  gravity: String

  """This is the object id."""
  id: ID!

  """This is the object name."""
  name: String

  """This is the object orbitalPeriod."""
  orbitalPeriod: Float

  """This is the object population."""
  population: Float

  """This is the object residents."""
  residents(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [CharacterOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: CharacterWhereInput
  ): CharacterFindResult!

  """This is the object rotationPeriod."""
  rotationPeriod: Float

  """This is the object species."""
  species(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [SpecieOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: SpecieWhereInput
  ): SpecieFindResult!

  """This is the object surfaceWater."""
  surfaceWater: Float

  """
  Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments
  """
  terrain: [ArrayResult]

  """This is the date in which the object was las updated."""
  updatedAt: Date!
}

"""
The PlanetFindResult object type is used in the Planet find query to return the data of the matched objects.
"""
type PlanetFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Planet!]!
}

"""
The PlanetOrder input type is used when sorting objects of the Planet class.
"""
enum PlanetOrder {
  ACL_ASC
  ACL_DESC
  climate_ASC
  climate_DESC
  createdAt_ASC
  createdAt_DESC
  diameter_ASC
  diameter_DESC
  films_ASC
  films_DESC
  gravity_ASC
  gravity_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  orbitalPeriod_ASC
  orbitalPeriod_DESC
  population_ASC
  population_DESC
  residents_ASC
  residents_DESC
  rotationPeriod_ASC
  rotationPeriod_DESC
  species_ASC
  species_DESC
  surfaceWater_ASC
  surfaceWater_DESC
  terrain_ASC
  terrain_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Allow to link OR add and link an object of the Planet class."""
input PlanetPointerInput {
  """Create and link an object from Planet class."""
  createAndLink: CreatePlanetFieldsInput

  """Link an existing object from Planet class."""
  link: ID
}

"""
The PlanetPointerWhereInput input type is used in operations that involve filtering objects by a pointer field to Planet class.
"""
input PlanetPointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the Planet class into a relation field.
"""
input PlanetRelationInput {
  """Add an existing object from the Planet class into the relation."""
  add: [ID!]

  """Create and add an object of the Planet class into the relation."""
  createAndAdd: [CreatePlanetFieldsInput!]

  """Remove an existing object from the Planet class out of the relation."""
  remove: [ID!]
}

"""
The PlanetWhereInput input type is used in operations that involve filtering objects of Planet class.
"""
input PlanetWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [PlanetWhereInput!]

  """This is the NOR operator to compound constraints."""
  NOR: [PlanetWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [PlanetWhereInput!]

  """This is the object climate."""
  climate: ArrayWhereInput

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object diameter."""
  diameter: NumberWhereInput

  """This is the object gravity."""
  gravity: StringWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object name."""
  name: StringWhereInput

  """This is the object orbitalPeriod."""
  orbitalPeriod: NumberWhereInput

  """This is the object population."""
  population: NumberWhereInput

  """This is the object rotationPeriod."""
  rotationPeriod: NumberWhereInput

  """This is the object surfaceWater."""
  surfaceWater: NumberWhereInput

  """This is the object terrain."""
  terrain: ArrayWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput
}

"""
The PointerFieldInput is used to specify a field of type pointer for an object class schema.
"""
input PointerFieldInput {
  """This is the field name."""
  name: String!

  """This is the name of the target class for the field."""
  targetClassName: String!
}

"""
The PolygonWhereInput input type is used in operations that involve filtering objects by a field of type Polygon.
"""
input PolygonWhereInput {
  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the geoIntersects operator to specify a constraint to select the objects where the values of a polygon field intersect a specified point.
  """
  geoIntersects: GeoIntersectsInput
}

"""Query is the top level type for queries."""
type Query {
  """
  The character query can be used to get an object of the Character class by its id.
  """
  character(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): Character!

  """
  The characters query can be used to find objects of the Character class.
  """
  characters(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [CharacterOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: CharacterWhereInput
  ): CharacterFindResult!

  """The class query can be used to retrieve an existing object class."""
  class(
    """This is the name of the object class."""
    name: String!
  ): Class!

  """The classes query can be used to retrieve the existing object classes."""
  classes: [Class!]!

  """
  The film query can be used to get an object of the Film class by its id.
  """
  film(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): Film!

  """The films query can be used to find objects of the Film class."""
  films(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [FilmOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: FilmWhereInput
  ): FilmFindResult!

  """The health query can be used to check if the server is up and running."""
  health: Boolean!

  """
  The planet query can be used to get an object of the Planet class by its id.
  """
  planet(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): Planet!

  """The planets query can be used to find objects of the Planet class."""
  planets(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [PlanetOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: PlanetWhereInput
  ): PlanetFindResult!

  """
  The role query can be used to get an object of the Role class by its id.
  """
  role(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): Role!

  """The roles query can be used to find objects of the Role class."""
  roles(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [RoleOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: RoleWhereInput
  ): RoleFindResult!

  """
  The specie query can be used to get an object of the Specie class by its id.
  """
  specie(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): Specie!

  """The species query can be used to find objects of the Specie class."""
  species(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [SpecieOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: SpecieWhereInput
  ): SpecieFindResult!

  """
  The starship query can be used to get an object of the Starship class by its id.
  """
  starship(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): Starship!

  """The starships query can be used to find objects of the Starship class."""
  starships(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [StarshipOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: StarshipWhereInput
  ): StarshipFindResult!

  """
  The user query can be used to get an object of the User class by its id.
  """
  user(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): User!

  """The users query can be used to find objects of the User class."""
  users(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [UserOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: UserWhereInput
  ): UserFindResult!

  """
  The vehicle query can be used to get an object of the Vehicle class by its id.
  """
  vehicle(
    """This is the object id."""
    id: ID!

    """The read options for the query to be executed."""
    options: ReadOptionsInput
  ): Vehicle!

  """The vehicles query can be used to find objects of the Vehicle class."""
  vehicles(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [VehicleOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: VehicleWhereInput
  ): VehicleFindResult!

  """The viewer query can be used to return the current user data."""
  viewer: Viewer!
}

"""
The ReadOptionsInputt type is used in queries in order to set the read preferences.
"""
input ReadOptionsInput {
  """The read preference for the queries to be executed to include fields."""
  includeReadPreference: ReadPreference

  """The read preference for the main query to be executed."""
  readPreference: ReadPreference

  """The read preference for the subqueries that may be required."""
  subqueryReadPreference: ReadPreference
}

"""
The ReadPreference enum type is used in queries in order to select in which database replica the operation must run.
"""
enum ReadPreference {
  NEAREST
  PRIMARY
  PRIMARY_PREFERRED
  SECONDARY
  SECONDARY_PREFERRED
}

"""
The RelationFieldInput is used to specify a field of type relation for an object class schema.
"""
input RelationFieldInput {
  """This is the field name."""
  name: String!

  """This is the name of the target class for the field."""
  targetClassName: String!
}

"""
The Role object type is used in operations that involve outputting objects of Role class.
"""
type Role implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object id."""
  id: ID!

  """This is the object name."""
  name: String

  """This is the object roles."""
  roles(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [RoleOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: RoleWhereInput
  ): RoleFindResult!

  """This is the date in which the object was las updated."""
  updatedAt: Date!

  """This is the object users."""
  users(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [UserOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: UserWhereInput
  ): UserFindResult!
}

"""
The RoleFindResult object type is used in the Role find query to return the data of the matched objects.
"""
type RoleFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Role!]!
}

"""
The RoleOrder input type is used when sorting objects of the Role class.
"""
enum RoleOrder {
  ACL_ASC
  ACL_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  roles_ASC
  roles_DESC
  updatedAt_ASC
  updatedAt_DESC
  users_ASC
  users_DESC
}

"""Allow to link OR add and link an object of the Role class."""
input RolePointerInput {
  """Create and link an object from Role class."""
  createAndLink: CreateRoleFieldsInput

  """Link an existing object from Role class."""
  link: ID
}

"""
The RolePointerWhereInput input type is used in operations that involve filtering objects by a pointer field to Role class.
"""
input RolePointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the Role class into a relation field.
"""
input RoleRelationInput {
  """Add an existing object from the Role class into the relation."""
  add: [ID!]

  """Create and add an object of the Role class into the relation."""
  createAndAdd: [CreateRoleFieldsInput!]

  """Remove an existing object from the Role class out of the relation."""
  remove: [ID!]
}

"""
The RoleWhereInput input type is used in operations that involve filtering objects of Role class.
"""
input RoleWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [RoleWhereInput!]

  """This is the NOR operator to compound constraints."""
  NOR: [RoleWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [RoleWhereInput!]

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object name."""
  name: StringWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput
}

"""The SchemaACLField is used to return information of an ACL field."""
type SchemaACLField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""The SchemaArrayField is used to return information of an Array field."""
type SchemaArrayField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaArrayFieldInput is used to specify a field of type array for an object class schema.
"""
input SchemaArrayFieldInput {
  """This is the field name."""
  name: String!
}

"""
The SchemaBooleanField is used to return information of a Boolean field.
"""
type SchemaBooleanField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaBooleanFieldInput is used to specify a field of type boolean for an object class schema.
"""
input SchemaBooleanFieldInput {
  """This is the field name."""
  name: String!
}

"""The SchemaBytesField is used to return information of a Bytes field."""
type SchemaBytesField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaBytesFieldInput is used to specify a field of type bytes for an object class schema.
"""
input SchemaBytesFieldInput {
  """This is the field name."""
  name: String!
}

"""The SchemaDateField is used to return information of a Date field."""
type SchemaDateField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaDateFieldInput is used to specify a field of type date for an object class schema.
"""
input SchemaDateFieldInput {
  """This is the field name."""
  name: String!
}

"""
The SchemaField interface type is used as a base type for the different supported fields of an object class schema.
"""
interface SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaFieldInput is used to specify a field of an object class schema.
"""
input SchemaFieldInput {
  """This is the field name."""
  name: String!
}

"""
The CreateClassSchemaInput type is used to specify the schema for a new object class to be created.
"""
input SchemaFieldsInput {
  """These are the Array fields to be added to the class schema."""
  addArrays: [SchemaArrayFieldInput!]

  """These are the Boolean fields to be added to the class schema."""
  addBooleans: [SchemaBooleanFieldInput!]

  """These are the Bytes fields to be added to the class schema."""
  addBytes: [SchemaBytesFieldInput!]

  """These are the Date fields to be added to the class schema."""
  addDates: [SchemaDateFieldInput!]

  """These are the File fields to be added to the class schema."""
  addFiles: [SchemaFileFieldInput!]

  """
  This is the Geo Point field to be added to the class schema. Currently it is supported only one GeoPoint field per Class.
  """
  addGeoPoint: SchemaGeoPointFieldInput

  """These are the Number fields to be added to the class schema."""
  addNumbers: [SchemaNumberFieldInput!]

  """These are the Object fields to be added to the class schema."""
  addObjects: [SchemaObjectFieldInput!]

  """These are the Pointer fields to be added to the class schema."""
  addPointers: [PointerFieldInput!]

  """These are the Polygon fields to be added to the class schema."""
  addPolygons: [SchemaPolygonFieldInput!]

  """These are the Relation fields to be added to the class schema."""
  addRelations: [RelationFieldInput!]

  """These are the String fields to be added to the class schema."""
  addStrings: [SchemaStringFieldInput!]

  """These are the fields to be removed from the class schema."""
  remove: [SchemaFieldInput!]
}

"""The SchemaFileField is used to return information of a File field."""
type SchemaFileField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaFileFieldInput is used to specify a field of type file for an object class schema.
"""
input SchemaFileFieldInput {
  """This is the field name."""
  name: String!
}

"""
The SchemaGeoPointField is used to return information of a Geo Point field.
"""
type SchemaGeoPointField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaGeoPointFieldInput is used to specify a field of type geo point for an object class schema.
"""
input SchemaGeoPointFieldInput {
  """This is the field name."""
  name: String!
}

"""The SchemaNumberField is used to return information of a Number field."""
type SchemaNumberField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaNumberFieldInput is used to specify a field of type number for an object class schema.
"""
input SchemaNumberFieldInput {
  """This is the field name."""
  name: String!
}

"""
The SchemaObjectField is used to return information of an Object field.
"""
type SchemaObjectField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaObjectFieldInput is used to specify a field of type object for an object class schema.
"""
input SchemaObjectFieldInput {
  """This is the field name."""
  name: String!
}

"""
The SchemaPointerField is used to return information of a Pointer field.
"""
type SchemaPointerField implements SchemaField {
  """This is the field name."""
  name: String!

  """This is the name of the target class for the field."""
  targetClassName: String!
}

"""
The SchemaPolygonField is used to return information of a Polygon field.
"""
type SchemaPolygonField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaPolygonFieldInput is used to specify a field of type polygon for an object class schema.
"""
input SchemaPolygonFieldInput {
  """This is the field name."""
  name: String!
}

"""
The SchemaRelationField is used to return information of a Relation field.
"""
type SchemaRelationField implements SchemaField {
  """This is the field name."""
  name: String!

  """This is the name of the target class for the field."""
  targetClassName: String!
}

"""The SchemaStringField is used to return information of a String field."""
type SchemaStringField implements SchemaField {
  """This is the field name."""
  name: String!
}

"""
The SchemaStringFieldInput is used to specify a field of type string for an object class schema.
"""
input SchemaStringFieldInput {
  """This is the field name."""
  name: String!
}

"""
The SearchInput type is used to specifiy a search operation on a full text search.
"""
input SearchInput {
  """This is the flag to enable or disable case sensitive search."""
  caseSensitive: Boolean

  """This is the flag to enable or disable diacritic sensitive search."""
  diacriticSensitive: Boolean

  """
  This is the language to tetermine the list of stop words and the rules for tokenizer.
  """
  language: String

  """This is the term to be searched."""
  term: String!
}

"""
The SelectInput type is used to specify an inQueryKey or a notInQueryKey operation on a constraint.
"""
input SelectInput {
  """
  This is the key in the result of the subquery that must match (not match) the field.
  """
  key: String!

  """This is the subquery to be executed."""
  query: SubqueryInput!
}

"""
The SignUpFieldsInput input type is used in operations that involve inputting objects of User class when signing up.
"""
input SignUpFieldsInput {
  """This is the object authData."""
  authData: Object

  """This is the object email."""
  email: String

  """This is the object emailVerified."""
  emailVerified: Boolean

  """This is the object password."""
  password: String!

  """This is the object username."""
  username: String!
}

"""
The Specie object type is used in operations that involve outputting objects of Specie class.
"""
type Specie implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object averageHeight."""
  averageHeight: Float

  """This is the object averageLifespan."""
  averageLifespan: Float

  """This is the object classification."""
  classification: String

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object designation."""
  designation: String

  """
  Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments
  """
  eyeColors: [ArrayResult]

  """This is the object films."""
  films(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [FilmOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: FilmWhereInput
  ): FilmFindResult!

  """
  Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments
  """
  hairColors: [ArrayResult]

  """This is the object homeworld."""
  homeworld: Planet

  """This is the object id."""
  id: ID!

  """This is the object language."""
  language: String

  """This is the object name."""
  name: String

  """This is the object people."""
  people(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [CharacterOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: CharacterWhereInput
  ): CharacterFindResult!

  """
  Use Inline Fragment on Array to get results: https://graphql.org/learn/queries/#inline-fragments
  """
  skinColors: [ArrayResult]

  """This is the date in which the object was las updated."""
  updatedAt: Date!
}

"""
The SpecieFindResult object type is used in the Specie find query to return the data of the matched objects.
"""
type SpecieFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Specie!]!
}

"""
The SpecieOrder input type is used when sorting objects of the Specie class.
"""
enum SpecieOrder {
  ACL_ASC
  ACL_DESC
  averageHeight_ASC
  averageHeight_DESC
  averageLifespan_ASC
  averageLifespan_DESC
  classification_ASC
  classification_DESC
  createdAt_ASC
  createdAt_DESC
  designation_ASC
  designation_DESC
  eyeColors_ASC
  eyeColors_DESC
  films_ASC
  films_DESC
  hairColors_ASC
  hairColors_DESC
  homeworld_ASC
  homeworld_DESC
  id_ASC
  id_DESC
  language_ASC
  language_DESC
  name_ASC
  name_DESC
  people_ASC
  people_DESC
  skinColors_ASC
  skinColors_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Allow to link OR add and link an object of the Specie class."""
input SpeciePointerInput {
  """Create and link an object from Specie class."""
  createAndLink: CreateSpecieFieldsInput

  """Link an existing object from Specie class."""
  link: ID
}

"""
The SpeciePointerWhereInput input type is used in operations that involve filtering objects by a pointer field to Specie class.
"""
input SpeciePointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the Specie class into a relation field.
"""
input SpecieRelationInput {
  """Add an existing object from the Specie class into the relation."""
  add: [ID!]

  """Create and add an object of the Specie class into the relation."""
  createAndAdd: [CreateSpecieFieldsInput!]

  """Remove an existing object from the Specie class out of the relation."""
  remove: [ID!]
}

"""
The SpecieWhereInput input type is used in operations that involve filtering objects of Specie class.
"""
input SpecieWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [SpecieWhereInput!]

  """This is the NOR operator to compound constraints."""
  NOR: [SpecieWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [SpecieWhereInput!]

  """This is the object averageHeight."""
  averageHeight: NumberWhereInput

  """This is the object averageLifespan."""
  averageLifespan: NumberWhereInput

  """This is the object classification."""
  classification: StringWhereInput

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object designation."""
  designation: StringWhereInput

  """This is the object eyeColors."""
  eyeColors: ArrayWhereInput

  """This is the object hairColors."""
  hairColors: ArrayWhereInput

  """This is the object homeworld."""
  homeworld: PlanetPointerWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object language."""
  language: StringWhereInput

  """This is the object name."""
  name: StringWhereInput

  """This is the object skinColors."""
  skinColors: ArrayWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput
}

"""
The Starship object type is used in operations that involve outputting objects of Starship class.
"""
type Starship implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object MGLT."""
  MGLT: Float

  """This is the object cargoCapacity."""
  cargoCapacity: Float

  """This is the object consumables."""
  consumables: String

  """This is the object costInCredits."""
  costInCredits: Float

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object crew."""
  crew: Float

  """This is the object films."""
  films(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [FilmOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: FilmWhereInput
  ): FilmFindResult!

  """This is the object hyperdriveRating."""
  hyperdriveRating: Float

  """This is the object id."""
  id: ID!

  """This is the object length."""
  length: Float

  """This is the object manufacturer."""
  manufacturer: String

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: Float

  """This is the object model."""
  model: String

  """This is the object name."""
  name: String

  """This is the object passengers."""
  passengers: Float

  """This is the object pilots."""
  pilots(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [CharacterOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: CharacterWhereInput
  ): CharacterFindResult!

  """This is the object starshipClass."""
  starshipClass: String

  """This is the date in which the object was las updated."""
  updatedAt: Date!
}

"""
The StarshipFindResult object type is used in the Starship find query to return the data of the matched objects.
"""
type StarshipFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Starship!]!
}

"""
The StarshipOrder input type is used when sorting objects of the Starship class.
"""
enum StarshipOrder {
  ACL_ASC
  ACL_DESC
  MGLT_ASC
  MGLT_DESC
  cargoCapacity_ASC
  cargoCapacity_DESC
  consumables_ASC
  consumables_DESC
  costInCredits_ASC
  costInCredits_DESC
  createdAt_ASC
  createdAt_DESC
  crew_ASC
  crew_DESC
  films_ASC
  films_DESC
  hyperdriveRating_ASC
  hyperdriveRating_DESC
  id_ASC
  id_DESC
  length_ASC
  length_DESC
  manufacturer_ASC
  manufacturer_DESC
  maxAtmospheringSpeed_ASC
  maxAtmospheringSpeed_DESC
  model_ASC
  model_DESC
  name_ASC
  name_DESC
  passengers_ASC
  passengers_DESC
  pilots_ASC
  pilots_DESC
  starshipClass_ASC
  starshipClass_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Allow to link OR add and link an object of the Starship class."""
input StarshipPointerInput {
  """Create and link an object from Starship class."""
  createAndLink: CreateStarshipFieldsInput

  """Link an existing object from Starship class."""
  link: ID
}

"""
The StarshipPointerWhereInput input type is used in operations that involve filtering objects by a pointer field to Starship class.
"""
input StarshipPointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the Starship class into a relation field.
"""
input StarshipRelationInput {
  """Add an existing object from the Starship class into the relation."""
  add: [ID!]

  """Create and add an object of the Starship class into the relation."""
  createAndAdd: [CreateStarshipFieldsInput!]

  """Remove an existing object from the Starship class out of the relation."""
  remove: [ID!]
}

"""
The StarshipWhereInput input type is used in operations that involve filtering objects of Starship class.
"""
input StarshipWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [StarshipWhereInput!]

  """This is the object MGLT."""
  MGLT: NumberWhereInput

  """This is the NOR operator to compound constraints."""
  NOR: [StarshipWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [StarshipWhereInput!]

  """This is the object cargoCapacity."""
  cargoCapacity: NumberWhereInput

  """This is the object consumables."""
  consumables: StringWhereInput

  """This is the object costInCredits."""
  costInCredits: NumberWhereInput

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object crew."""
  crew: NumberWhereInput

  """This is the object hyperdriveRating."""
  hyperdriveRating: NumberWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object length."""
  length: NumberWhereInput

  """This is the object manufacturer."""
  manufacturer: StringWhereInput

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: NumberWhereInput

  """This is the object model."""
  model: StringWhereInput

  """This is the object name."""
  name: StringWhereInput

  """This is the object passengers."""
  passengers: NumberWhereInput

  """This is the object starshipClass."""
  starshipClass: StringWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput
}

"""
The StringWhereInput input type is used in operations that involve filtering objects by a field of type String.
"""
input StringWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: String

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the greaterThan operator to specify a constraint to select the objects where the value of a field is greater than a specified value.
  """
  greaterThan: String

  """
  This is the greaterThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is greater than or equal to a specified value.
  """
  greaterThanOrEqualTo: String

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [String]

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the lessThan operator to specify a constraint to select the objects where the value of a field is less than a specified value.
  """
  lessThan: String

  """
  This is the lessThanOrEqualTo operator to specify a constraint to select the objects where the value of a field is less than or equal to a specified value.
  """
  lessThanOrEqualTo: String

  """
  This is the matchesRegex operator to specify a constraint to select the objects where the value of a field matches a specified regular expression.
  """
  matchesRegex: String

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: String

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [String]

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput

  """
  This is the options operator to specify optional flags (such as "i" and "m") to be added to a matchesRegex operation in the same set of constraints.
  """
  options: String

  """This is the $text operator to specify a full text search constraint."""
  text: TextInput
}

"""
The SubqueryInput type is used to specify a sub query to another class.
"""
input SubqueryInput {
  """This is the class name of the object."""
  className: String!

  """
  These are the conditions that the objects need to match in order to be found
  """
  where: Object!
}

"""
The TextInput type is used to specify a text operation on a constraint.
"""
input TextInput {
  """This is the search to be executed."""
  search: SearchInput!
}

"""
The UpdateCharacterFieldsInput input type is used in operations that involve creation of objects in the Character class.
"""
input UpdateCharacterFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object birthYear."""
  birthYear: String

  """This is the object eyeColor."""
  eyeColor: String

  """This is the object films."""
  films: FilmRelationInput

  """This is the object gender."""
  gender: String

  """This is the object hairColor."""
  hairColor: String

  """This is the object height."""
  height: Float

  """This is the object homeworld."""
  homeworld: PlanetPointerInput

  """This is the object mass."""
  mass: Float

  """This is the object name."""
  name: String

  """This is the object skinColor."""
  skinColor: String

  """This is the object species."""
  species: SpecieRelationInput

  """This is the object starships."""
  starships: StarshipRelationInput

  """This is the object vehicles."""
  vehicles: VehicleRelationInput
}

"""
The UpdateFilmFieldsInput input type is used in operations that involve creation of objects in the Film class.
"""
input UpdateFilmFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object characters."""
  characters: CharacterRelationInput

  """This is the object director."""
  director: String

  """This is the object episodeId."""
  episodeId: Float

  """This is the object openingCrawl."""
  openingCrawl: String

  """This is the object planets."""
  planets: PlanetRelationInput

  """This is the object producer."""
  producer: String

  """This is the object releaseDate."""
  releaseDate: Date

  """This is the object species."""
  species: SpecieRelationInput

  """This is the object starships."""
  starships: StarshipRelationInput

  """This is the object title."""
  title: String

  """This is the object vehicles."""
  vehicles: VehicleRelationInput
}

"""
The UpdatePlanetFieldsInput input type is used in operations that involve creation of objects in the Planet class.
"""
input UpdatePlanetFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object climate."""
  climate: [Any]

  """This is the object diameter."""
  diameter: Float

  """This is the object films."""
  films: FilmRelationInput

  """This is the object gravity."""
  gravity: String

  """This is the object name."""
  name: String

  """This is the object orbitalPeriod."""
  orbitalPeriod: Float

  """This is the object population."""
  population: Float

  """This is the object residents."""
  residents: CharacterRelationInput

  """This is the object rotationPeriod."""
  rotationPeriod: Float

  """This is the object species."""
  species: SpecieRelationInput

  """This is the object surfaceWater."""
  surfaceWater: Float

  """This is the object terrain."""
  terrain: [Any]
}

"""
The UpdateRoleFieldsInput input type is used in operations that involve creation of objects in the Role class.
"""
input UpdateRoleFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object name."""
  name: String

  """This is the object roles."""
  roles: RoleRelationInput

  """This is the object users."""
  users: UserRelationInput
}

"""
The UpdateSpecieFieldsInput input type is used in operations that involve creation of objects in the Specie class.
"""
input UpdateSpecieFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object averageHeight."""
  averageHeight: Float

  """This is the object averageLifespan."""
  averageLifespan: Float

  """This is the object classification."""
  classification: String

  """This is the object designation."""
  designation: String

  """This is the object eyeColors."""
  eyeColors: [Any]

  """This is the object films."""
  films: FilmRelationInput

  """This is the object hairColors."""
  hairColors: [Any]

  """This is the object homeworld."""
  homeworld: PlanetPointerInput

  """This is the object language."""
  language: String

  """This is the object name."""
  name: String

  """This is the object people."""
  people: CharacterRelationInput

  """This is the object skinColors."""
  skinColors: [Any]
}

"""
The UpdateStarshipFieldsInput input type is used in operations that involve creation of objects in the Starship class.
"""
input UpdateStarshipFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object MGLT."""
  MGLT: Float

  """This is the object cargoCapacity."""
  cargoCapacity: Float

  """This is the object consumables."""
  consumables: String

  """This is the object costInCredits."""
  costInCredits: Float

  """This is the object crew."""
  crew: Float

  """This is the object films."""
  films: FilmRelationInput

  """This is the object hyperdriveRating."""
  hyperdriveRating: Float

  """This is the object length."""
  length: Float

  """This is the object manufacturer."""
  manufacturer: String

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: Float

  """This is the object model."""
  model: String

  """This is the object name."""
  name: String

  """This is the object passengers."""
  passengers: Float

  """This is the object pilots."""
  pilots: CharacterRelationInput

  """This is the object starshipClass."""
  starshipClass: String
}

"""
The UpdateUserFieldsInput input type is used in operations that involve creation of objects in the User class.
"""
input UpdateUserFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object authData."""
  authData: Object

  """This is the object email."""
  email: String

  """This is the object emailVerified."""
  emailVerified: Boolean

  """This is the object password."""
  password: String

  """This is the object username."""
  username: String
}

"""
The UpdateVehicleFieldsInput input type is used in operations that involve creation of objects in the Vehicle class.
"""
input UpdateVehicleFieldsInput {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object cargoCapacity."""
  cargoCapacity: Float

  """This is the object consumables."""
  consumables: String

  """This is the object costInCredits."""
  costInCredits: Float

  """This is the object crew."""
  crew: Float

  """This is the object films."""
  films: FilmRelationInput

  """This is the object length."""
  length: Float

  """This is the object manufacturer."""
  manufacturer: String

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: Float

  """This is the object model."""
  model: String

  """This is the object name."""
  name: String

  """This is the object passengers."""
  passengers: Float

  """This is the object pilots."""
  pilots: CharacterRelationInput

  """This is the object vehicleClass."""
  vehicleClass: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""
The User object type is used in operations that involve outputting objects of User class.
"""
type User implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object authData."""
  authData: Object

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object email."""
  email: String

  """This is the object emailVerified."""
  emailVerified: Boolean

  """This is the object id."""
  id: ID!

  """This is the date in which the object was las updated."""
  updatedAt: Date!

  """This is the object username."""
  username: String
}

"""
The UserFindResult object type is used in the User find query to return the data of the matched objects.
"""
type UserFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [User!]!
}

"""
The UserOrder input type is used when sorting objects of the User class.
"""
enum UserOrder {
  ACL_ASC
  ACL_DESC
  authData_ASC
  authData_DESC
  createdAt_ASC
  createdAt_DESC
  emailVerified_ASC
  emailVerified_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

"""Allow to link OR add and link an object of the User class."""
input UserPointerInput {
  """Create and link an object from User class."""
  createAndLink: CreateUserFieldsInput

  """Link an existing object from User class."""
  link: ID
}

"""
The UserPointerWhereInput input type is used in operations that involve filtering objects by a pointer field to User class.
"""
input UserPointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the User class into a relation field.
"""
input UserRelationInput {
  """Add an existing object from the User class into the relation."""
  add: [ID!]

  """Create and add an object of the User class into the relation."""
  createAndAdd: [CreateUserFieldsInput!]

  """Remove an existing object from the User class out of the relation."""
  remove: [ID!]
}

"""
The UserWhereInput input type is used in operations that involve filtering objects of User class.
"""
input UserWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [UserWhereInput!]

  """This is the NOR operator to compound constraints."""
  NOR: [UserWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [UserWhereInput!]

  """This is the object authData."""
  authData: ObjectWhereInput

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object email."""
  email: StringWhereInput

  """This is the object emailVerified."""
  emailVerified: BooleanWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object password."""
  password: StringWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput

  """This is the object username."""
  username: StringWhereInput
}

"""
The Vehicle object type is used in operations that involve outputting objects of Vehicle class.
"""
type Vehicle implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object cargoCapacity."""
  cargoCapacity: Float

  """This is the object consumables."""
  consumables: String

  """This is the object costInCredits."""
  costInCredits: Float

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object crew."""
  crew: Float

  """This is the object films."""
  films(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [FilmOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: FilmWhereInput
  ): FilmFindResult!

  """This is the object id."""
  id: ID!

  """This is the object length."""
  length: Float

  """This is the object manufacturer."""
  manufacturer: String

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: Float

  """This is the object model."""
  model: String

  """This is the object name."""
  name: String

  """This is the object passengers."""
  passengers: Float

  """This is the object pilots."""
  pilots(
    """This is the limit number of objects that must be returned."""
    limit: Int

    """The read options for the query to be executed."""
    options: ReadOptionsInput

    """The fields to be used when sorting the data fetched."""
    order: [CharacterOrder!]

    """This is the number of objects that must be skipped to return."""
    skip: Int

    """
    These are the conditions that the objects need to match in order to be found.
    """
    where: CharacterWhereInput
  ): CharacterFindResult!

  """This is the date in which the object was las updated."""
  updatedAt: Date!

  """This is the object vehicleClass."""
  vehicleClass: String
}

"""
The VehicleFindResult object type is used in the Vehicle find query to return the data of the matched objects.
"""
type VehicleFindResult {
  """
  This is the total matched objecs count that is returned when the count flag is set.
  """
  count: Int!

  """This is the objects returned by the query"""
  results: [Vehicle!]!
}

"""
The VehicleOrder input type is used when sorting objects of the Vehicle class.
"""
enum VehicleOrder {
  ACL_ASC
  ACL_DESC
  cargoCapacity_ASC
  cargoCapacity_DESC
  consumables_ASC
  consumables_DESC
  costInCredits_ASC
  costInCredits_DESC
  createdAt_ASC
  createdAt_DESC
  crew_ASC
  crew_DESC
  films_ASC
  films_DESC
  id_ASC
  id_DESC
  length_ASC
  length_DESC
  manufacturer_ASC
  manufacturer_DESC
  maxAtmospheringSpeed_ASC
  maxAtmospheringSpeed_DESC
  model_ASC
  model_DESC
  name_ASC
  name_DESC
  passengers_ASC
  passengers_DESC
  pilots_ASC
  pilots_DESC
  updatedAt_ASC
  updatedAt_DESC
  vehicleClass_ASC
  vehicleClass_DESC
}

"""Allow to link OR add and link an object of the Vehicle class."""
input VehiclePointerInput {
  """Create and link an object from Vehicle class."""
  createAndLink: CreateVehicleFieldsInput

  """Link an existing object from Vehicle class."""
  link: ID
}

"""
The VehiclePointerWhereInput input type is used in operations that involve filtering objects by a pointer field to Vehicle class.
"""
input VehiclePointerWhereInput {
  """
  This is the equalTo operator to specify a constraint to select the objects where the value of a field equals to a specified value.
  """
  equalTo: ID

  """
  This is the exists operator to specify a constraint to select the objects where a field exists (or do not exist).
  """
  exists: Boolean

  """
  This is the in operator to specify a constraint to select the objects where the value of a field equals any value in the specified array.
  """
  in: [ID!]

  """
  This is the inQuery operator to specify a constraint to select the objects where a field equals to any of the ids in the result of a different query.
  """
  inQuery: SubqueryInput

  """
  This is the inQueryKey operator to specify a constraint to select the objects where a field equals to a key in the result of a different query.
  """
  inQueryKey: SelectInput

  """
  This is the notEqualTo operator to specify a constraint to select the objects where the value of a field do not equal to a specified value.
  """
  notEqualTo: ID

  """
  This is the notIn operator to specify a constraint to select the objects where the value of a field do not equal any value in the specified array.
  """
  notIn: [ID!]

  """
  This is the notInQuery operator to specify a constraint to select the objects where a field do not equal to any of the ids in the result of a different query.
  """
  notInQuery: SubqueryInput

  """
  This is the notInQueryKey operator to specify a constraint to select the objects where a field do not equal to a key in the result of a different query.
  """
  notInQueryKey: SelectInput
}

"""
Allow to add, remove, createAndAdd objects of the Vehicle class into a relation field.
"""
input VehicleRelationInput {
  """Add an existing object from the Vehicle class into the relation."""
  add: [ID!]

  """Create and add an object of the Vehicle class into the relation."""
  createAndAdd: [CreateVehicleFieldsInput!]

  """Remove an existing object from the Vehicle class out of the relation."""
  remove: [ID!]
}

"""
The VehicleWhereInput input type is used in operations that involve filtering objects of Vehicle class.
"""
input VehicleWhereInput {
  """This is the object ACL."""
  ACL: ObjectWhereInput

  """This is the AND operator to compound constraints."""
  AND: [VehicleWhereInput!]

  """This is the NOR operator to compound constraints."""
  NOR: [VehicleWhereInput!]

  """This is the OR operator to compound constraints."""
  OR: [VehicleWhereInput!]

  """This is the object cargoCapacity."""
  cargoCapacity: NumberWhereInput

  """This is the object consumables."""
  consumables: StringWhereInput

  """This is the object costInCredits."""
  costInCredits: NumberWhereInput

  """This is the object createdAt."""
  createdAt: DateWhereInput

  """This is the object crew."""
  crew: NumberWhereInput

  """This is the object id."""
  id: StringWhereInput

  """This is the object length."""
  length: NumberWhereInput

  """This is the object manufacturer."""
  manufacturer: StringWhereInput

  """This is the object maxAtmospheringSpeed."""
  maxAtmospheringSpeed: NumberWhereInput

  """This is the object model."""
  model: StringWhereInput

  """This is the object name."""
  name: StringWhereInput

  """This is the object passengers."""
  passengers: NumberWhereInput

  """This is the object updatedAt."""
  updatedAt: DateWhereInput

  """This is the object vehicleClass."""
  vehicleClass: StringWhereInput
}

"""
The Viewer object type is used in operations that involve outputting the current user data.
"""
type Viewer implements ParseObject {
  """This is the access control list of the object."""
  ACL: Object

  """This is the object authData."""
  authData: Object

  """This is the date in which the object was created."""
  createdAt: Date!

  """This is the object email."""
  email: String

  """This is the object emailVerified."""
  emailVerified: Boolean

  """This is the object id."""
  id: ID!

  """The user session token"""
  sessionToken: String!

  """This is the date in which the object was las updated."""
  updatedAt: Date!

  """This is the object username."""
  username: String
}

"""
The WithinInput type is used to specify a within operation on a constraint.
"""
input WithinInput {
  """This is the box to be specified."""
  box: BoxInput!
}